name: Test DF

on:
  workflow_dispatch:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_run:
    workflows: ["publish-pypi-wheels"]
    branches: [main]
    types:
      - completed
  schedule:
    - cron: '0 18 * * 0'

jobs:
  test-df-output:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        python: ["3.9"]
        os: ["ubuntu-latest", "macos-latest", "windows-latest"]
        # is_pr:
        #   - ${{ github.event_name == 'pull_request' }}
        # include:
        #   - os: "ubuntu-latest"
        # exclude:
        #   - os: "macos-latest"
        #     is_pr: true  # Run only linux on PR
        #   - os: "windows-latest"
        #     is_pr: true  # Run only linux on PR
    defaults:
      run:
        shell: bash
    steps:
      - uses: actions/checkout@v3
      - name: Echo git tag
        run: |
          echo "git tag: ${{github.event.head_commit.message}}"
          echo "git tag: ${{github.event.commits[0].message}}"
          echo "DF version:  $(scripts/get_version.sh)"
          echo "DF_VERSION=$(scripts/get_version.sh)" >> $GITHUB_ENV
      - name: should it be skipped?
        env:
          COMMIT_FILTER: '^v[0-9]+.[0-9]+.[0-9]+$'
        run: |
          readonly local last_commit_log=$(git log -1 --pretty=format:"%s")
          echo "last commit log: $last_commit_log"
          readonly local filter_count=$(echo "$last_commit_log" | grep -E -c "$COMMIT_FILTER" )
          if ! [[ "$filter_count" -eq 0 ]]; then
            echo "the last commit log \"$last_commit_log\" contains \"$COMMIT_FILTER\", stopping"
            exit 78
          fi
      - name: Cancel Previous Runs
        uses: styfle/cancel-workflow-action@0.11.0
        with:
          access_token: ${{ github.token }}
      # Soundfile backend for torchaudio
      - name: Set Extra Dependency Windows
        if: matrix.os == 'windows-latest'
        run: |
          echo "EXTRA=-E soundfile" >> $GITHUB_ENV

      # Rust installation
      - name: Install Rust
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: nightly
      - name: Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.toml') }}

      # Python and poetry install
      - name: Install Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python }}
      - name: Load cached Poetry installation
        if: matrix.os != 'windows-latest'
        uses: actions/cache@v3
        with:
          path: ~/.local
          key: poetry-${{ runner.os }}-${{ matrix.python }}-1
      - name: Bootstrap poetry
        run: |
          curl -sL https://install.python-poetry.org | python - -y
      - name: Update PATH
        if: ${{ matrix.os != 'windows-latest' }}
        run: echo "$HOME/.local/bin" >> $GITHUB_PATH
      - name: Update Path for Windows
        if: ${{ matrix.os == 'windows-latest' }}
        run: |
          echo "$APPDATA\Python\Scripts" >> $GITHUB_PATH
          which python
          python --version
      - name: Configure poetry
        run: poetry config virtualenvs.in-project true
      - name: Set venv up cache
        uses: actions/cache@v3
        id: cache
        with:
          path: |
            ~/.cache/DeepFilterNet
            .venv
            DeepFilterNet/.venv
          key: venv-${{ runner.os }}-${{ matrix.python }}-${{ hashFiles('**/pyproject.toml') }}

      # Install DeepFilterNet and dependencies
      - name: Install runtime dependencies and DeepFilterNet
        if: matrix.os != 'windows-latest'
        working-directory: DeepFilterNet
        run: |
          poetry --version
          poetry install -vvv --no-interaction -E eval -E dnsmos-local ${{env.EXTRA}}
          echo "Installing pytorch"
          poetry run poe install-torch-cpu
      - name: Install runtime dependencies and DeepFilterNet for Windows
        if: matrix.os == 'windows-latest'
        working-directory: DeepFilterNet
        run: |
          poetry --version
          poetry install -vvv --no-interaction -E dnsmos-local ${{env.EXTRA}}
          echo "Installing pytorch"
          poetry run poe install-torch-cpu
          echo "Installing eval-utils"
          poetry run poe install-eval-utils


      # Run tests
      - name: Run DF Test
        working-directory: DeepFilterNet
        run: |
          poetry run python df/scripts/test_df.py
      # Test deepFilter executable
      - name: Test deepFilter script
        working-directory: DeepFilterNet
        env:
          DNS_AUTH_KEY: ${{ secrets.DNS_AUTH_KEY }}
        run: |
          mkdir ../out
          poetry run deepFilter --version
          poetry run deepFilter ../assets/noisy_snr0.wav -m DeepFilterNet -o ../out
          poetry run deepFilter ../assets/noisy_snr0.wav -m DeepFilterNet2 -o ../out
          poetry run deepFilter ../assets/noisy_snr0.wav -m DeepFilterNet3 -o ../out
          poetry run python df/scripts/dnsmos_v5.py ../assets/noisy_snr0.wav -t 3.593157109941994, 2.6762185573926756, 2.5772815929645208, 2.9930654
          poetry run python df/scripts/dnsmos_v5.py ../out/noisy_snr0_DeepFilterNet.wav -t 3.320198609916083, 3.995019883633959, 3.0340518350340058, 3.709483
          poetry run python df/scripts/dnsmos_v5.py ../out/noisy_snr0_DeepFilterNet2.wav -t 3.3456805601892454, 4.095289455202942, 3.1015692702262143, 3.7800858
          poetry run python df/scripts/dnsmos_v5.py ../out/noisy_snr0_DeepFilterNet3.wav -t 3.3711728515217914, 4.087029941126605, 3.118482291999213, 3.7518153

      - uses: actions/upload-artifact@v3
        with:
          name: enhanced-${{ runner.os }}
          path: out/*wav
