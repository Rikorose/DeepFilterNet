name: Rust CI

on:
  push:
  schedule:
    - cron: '0 18 * * *'

env:
  CARGO_TERM_COLOR: always

jobs:
  test:
    runs-on: ubuntu-latest
    env:
      RUST_BACKTRACE: 1
    strategy:
      fail-fast: false
      matrix:
        include:
          - {command: fmt, rust: nightly, args: '--all -- --check', hdf5: false}
          - {command: clippy, rust: stable, args: '--all-features --tests -- -D warnings', hdf5: true}
          - {command: test, rust: stable, args: '--all-features -p deep_filter', hdf5: true}
          - {command: build, rust: stable, args: '-p deep_filter', hdf5: false}
          - {command: build, rust: stable, args: '--all-features', hdf5: true}
          - {command: build, rust: nightly, args: '--all-features', hdf5: true}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Install Rust (${{matrix.rust}})
        uses: actions-rs/toolchain@v1
        with: {profile: minimal, toolchain: '${{matrix.rust}}', override: true, components: 'rustfmt, clippy'}
      - name: Rust cache
        uses: Swatinem/rust-cache@v1
        with:
          key: ${{ runner.os }}-${{ matrix.command }}-cargo-${{ hashFiles('**/Cargo.toml') }}
      - name: Install HDF5
        if: matrix.hdf5 == true
        run: sudo apt-get install libhdf5-dev
      - name: Run cargo ${{matrix.command}}
        uses: actions-rs/cargo@v1
        with:
          command: ${{matrix.command}}
          args: ${{matrix.args}}
      - uses: actions/upload-artifact@v2
        if: matrix.command == 'test'
        with:
          name: test-artifacts
          path: out/

  build-deepfilter-rs:
    runs-on: ${{ matrix.os }}
    env:
      # For some builds, we use cross to test on 32-bit and big-endian
      # systems.
      CARGO: cargo
      # When CARGO is set to CROSS, this is set to `--target matrix.target`.
      TARGET_FLAGS: ""
      # When CARGO is set to CROSS, TARGET_DIR includes matrix.target.
      TARGET_DIR: ./target
      # Emit backtraces on panics.
      RUST_BACKTRACE: 1
    strategy:
      matrix:
        build: [linux-x86, linux-arm-v7, linux-arm-aarch64, macos-x86, macos-aarch64, win-msvc]
        include:
          - build: linux-x86
            os: ubuntu-22.04
            target: x86_64-unknown-linux-musl
          - build: linux-arm-v7
            os: ubuntu-22.04
            target: armv7-unknown-linux-gnueabihf
          - build: linux-arm-aarch64
            os: ubuntu-22.04
            target: aarch64-unknown-linux-gnu
          - build: macos-x86
            os: macos-12
            target: x86_64-apple-darwin
          - build: macos-aarch64
            os: macos-12
            target: aarch64-apple-darwin
          - build: win-msvc
            os: windows-2022
            target: x86_64-pc-windows-msvc
    defaults:
      run:
        shell: bash
    steps:
      - uses: actions/checkout@v3

      - name: Install Rust
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: stable
          target: ${{ matrix.target }}

      - name: Use Cross
        shell: bash
        run: |
          cargo install cross
          echo "CARGO=cross" >> $GITHUB_ENV
          echo "TARGET_FLAGS=--target ${{ matrix.target }}" >> $GITHUB_ENV
          echo "TARGET_DIR=./target/${{ matrix.target }}" >> $GITHUB_ENV

      - name: Show command used for Cargo
        run: |
          echo "cargo command is: ${{ env.CARGO }}"
          echo "target flag is: ${{ env.TARGET_FLAGS }}"
          echo "target dir is: ${{ env.TARGET_DIR }}"


      - name: Build release binary
        run: ${{ env.CARGO }} build --verbose --features bin,tract,use-jemalloc,wav-utils --profile=release-lto -p deep_filter --bin deep-filter ${{ env.TARGET_FLAGS }}

      - name: Get the release version from the tag
        shell: bash
        if: env.DF_VERSION == ''
        run: |
          DF_VERSION=$(cargo pkgid --manifest-path libDF/Cargo.toml | sed -e 's/^.*deep_filter@//g')
          if [[ $DF_VERSION =~ ^.*-pre$ ]]; then DF_VERSION="$DF_VERSION"-"$(git rev-parse --short HEAD)"; fi
          echo "DF_VERSION=$DF_VERSION"
          echo "DF_VERSION=$DF_VERSION" >> $GITHUB_ENV

      - name: Rename to target
        run: |
          mv "target/${{ matrix.target }}/release-lto/deep-filter" "${{ env.TARGET_DIR }}/deep-filter-${{ env.DF_VERSION }}-${{ matrix.target }}"

      - uses: actions/upload-artifact@v3
        with:
          name: deep-filter-${{ env.DF_VERSION }}-${{ matrix.target }}
          path: ${{ env.TARGET_DIR }}/deep-filter-${{ env.DF_VERSION }}-${{ matrix.target }}*

  build-deepfilter-ladspa:
    runs-on: ${{ matrix.os }}
    env:
      # For some builds, we use cross to test on 32-bit and big-endian
      # systems.
      CARGO: cargo
      # When CARGO is set to CROSS, this is set to `--target matrix.target`.
      TARGET_FLAGS: ""
      # When CARGO is set to CROSS, TARGET_DIR includes matrix.target.
      TARGET_DIR: ./target
      # Emit backtraces on panics.
      RUST_BACKTRACE: 1
    strategy:
      fail-fast: false
      matrix:
        build: [linux-x86, linux-arm-v7, linux-arm-aarch64, macos-x86, macos-aarch64, win-msvc]
        include:
          - build: linux-x86
            os: ubuntu-22.04
            target: x86_64-unknown-linux-gnu
            libname: libdeep_filter_ladspa
            libext: so
          - build: linux-arm-v7
            os: ubuntu-22.04
            target: armv7-unknown-linux-gnueabihf
            libname: libdeep_filter_ladspa
            libext: so
          - build: linux-arm-aarch64
            os: ubuntu-22.04
            target: aarch64-unknown-linux-gnu
            libname: libdeep_filter_ladspa
            libext: so
          - build: macos-x86
            os: macos-12
            target: x86_64-apple-darwin
            libname: libdeep_filter_ladspa
            libext: dylib
          - build: macos-aarch64
            os: macos-12
            target: aarch64-apple-darwin
            libname: libdeep_filter_ladspa
            libext: dylib
          - build: win-msvc
            os: windows-2022
            target: x86_64-pc-windows-msvc
            libname: deep_filter_ladspa
            libext: dll
    defaults:
      run:
        shell: bash
    steps:
      - uses: actions/checkout@v3

      - name: Install Rust
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: stable
          target: ${{ matrix.target }}

      - name: Use Cross
        shell: bash
        run: |
          cargo install cross
          echo "CARGO=cross" >> $GITHUB_ENV
          echo "TARGET_FLAGS=--target ${{ matrix.target }}" >> $GITHUB_ENV
          echo "TARGET_DIR=./target/${{ matrix.target }}" >> $GITHUB_ENV

      - name: Show command used for Cargo
        run: |
          echo "cargo command is: ${{ env.CARGO }}"
          echo "target flag is: ${{ env.TARGET_FLAGS }}"
          echo "target dir is: ${{ env.TARGET_DIR }}"

      - name: Build release binary
        run: ${{ env.CARGO }} build --profile=release-lto -p deep-filter-ladspa ${{ env.TARGET_FLAGS }}

      - name: Get the release version from the tag
        shell: bash
        if: env.DF_VERSION == ''
        run: |
          DF_VERSION=$(cargo pkgid --manifest-path libDF/Cargo.toml | sed -e 's/^.*deep_filter@//g')
          if [[ $DF_VERSION =~ ^.*-pre$ ]]; then DF_VERSION="$DF_VERSION"-"$(git rev-parse --short HEAD)"; fi
          echo "DF_VERSION=$DF_VERSION"
          echo "DF_VERSION=$DF_VERSION" >> $GITHUB_ENV

      - name: Rename to target
        run: |
          mv "target/${{ matrix.target }}/release-lto/${{ matrix.libname }}.${{ matrix.libext }}" "${{ env.TARGET_DIR }}/libdeep_filter_ladspa-${{ env.DF_VERSION }}-${{ matrix.target }}.${{ matrix.libext }}"

      - uses: actions/upload-artifact@v3
        with:
          name: libdeep_filter_ladspa-${{ env.DF_VERSION }}-${{ matrix.target }}
          path: ${{ env.TARGET_DIR }}/${{ matrix.libname }}-${{ env.DF_VERSION }}-${{ matrix.target }}.${{ matrix.libext }}
